    Function check-row{ #check if rows are valid

param (
    [Parameter(Mandatory=$true)]
    $Row2Check 
    )

$Row2Check = $Row2Check -ne "blank" 

$Duplicatecheck = $Row2Check | select -Unique 

if (!$Duplicatecheck) {$Duplicatecheck = $Row2Check } #$Null check as $Null creates issues

$RowValidity =  Compare-Object -ReferenceObject $Row2Check -DifferenceObject $Duplicatecheck -ErrorAction SilentlyContinue

if( $RowValidity -ne $null)
    {
    Return $False
    }else{
        Return $true}
}
    
    Function check-square{ #check if squares are valid

param (
    [Parameter(Mandatory=$true)]
    $InitialPuzzle, 
    [Parameter(Mandatory=$true)]
    $SquareNumber
    )
 
$Square1 = @()
$Square2 = @()
$Square3 = @()
$Square4 = @()
$Square5 = @()
$Square6 = @()
$Square7 = @()
$Square8 = @()
$Square9 = @()

   $Square1 = (($InitialPuzzle[0][0],$InitialPuzzle[0][1],$InitialPuzzle[0][2]),($InitialPuzzle[1][0],$InitialPuzzle[1][1],$InitialPuzzle[1][2]),($InitialPuzzle[2][0],$InitialPuzzle[2][1],$InitialPuzzle[2][2]))
   $Square2 = (($InitialPuzzle[0][3],$InitialPuzzle[0][4],$InitialPuzzle[0][5]),($InitialPuzzle[1][3],$InitialPuzzle[1][4],$InitialPuzzle[1][5]),($InitialPuzzle[2][3],$InitialPuzzle[2][4],$InitialPuzzle[2][5]))
   $Square3 = (($InitialPuzzle[0][6],$InitialPuzzle[0][7],$InitialPuzzle[0][8]),($InitialPuzzle[1][6],$InitialPuzzle[1][7],$InitialPuzzle[1][8]),($InitialPuzzle[2][6],$InitialPuzzle[2][7],$InitialPuzzle[2][8]))

   $Square4 = (($InitialPuzzle[3][0],$InitialPuzzle[3][1],$InitialPuzzle[3][2]),($InitialPuzzle[4][0],$InitialPuzzle[4][1],$InitialPuzzle[4][2]),($InitialPuzzle[5][0],$InitialPuzzle[5][1],$InitialPuzzle[5][2]))
   $Square5 = (($InitialPuzzle[3][3],$InitialPuzzle[3][4],$InitialPuzzle[3][5]),($InitialPuzzle[4][3],$InitialPuzzle[4][4],$InitialPuzzle[4][5]),($InitialPuzzle[5][3],$InitialPuzzle[5][4],$InitialPuzzle[5][5]))
   $Square6 = (($InitialPuzzle[3][6],$InitialPuzzle[3][7],$InitialPuzzle[3][8]),($InitialPuzzle[4][6],$InitialPuzzle[4][7],$InitialPuzzle[4][8]),($InitialPuzzle[5][6],$InitialPuzzle[5][7],$InitialPuzzle[5][8]))

   $Square7 = (($InitialPuzzle[6][0],$InitialPuzzle[6][1],$InitialPuzzle[6][2]),($InitialPuzzle[7][0],$InitialPuzzle[7][1],$InitialPuzzle[7][2]),($InitialPuzzle[8][0],$InitialPuzzle[8][1],$InitialPuzzle[8][2]))
   $Square8 = (($InitialPuzzle[6][3],$InitialPuzzle[6][4],$InitialPuzzle[6][5]),($InitialPuzzle[7][3],$InitialPuzzle[7][4],$InitialPuzzle[7][5]),($InitialPuzzle[8][3],$InitialPuzzle[8][4],$InitialPuzzle[8][5]))
   $Square9 = (($InitialPuzzle[6][6],$InitialPuzzle[6][7],$InitialPuzzle[6][8]),($InitialPuzzle[7][6],$InitialPuzzle[7][7],$InitialPuzzle[7][8]),($InitialPuzzle[8][6],$InitialPuzzle[8][7],$InitialPuzzle[8][8]))

$Square2Check = @()

    $SquareCheck = Get-Variable -name "Square$SquareNumber" -ValueOnly
    $SquareAsRow = $Squarecheck[0] + $Squarecheck[1] + $Squarecheck[2]
    $SquareValidity = check-row -Row2Check $SquareAsRow 

Return $SquareValidity

}

    Function check-column{ #check if columns are valid
param (
    [Parameter(Mandatory=$true)]
    $InitialPuzzle, 
    [Parameter(Mandatory=$true)]
    $ColumnNumber
    )

$Column2Check = @()

    for ($num = 0 ; $num -le 8 ; $num++)
    {
    $Column2Check += $InitialPuzzle[$num][$ColumnNumber] 
    }

$Column2Check = $Column2Check -ne "blank"
 
$Duplicatecheck = $Column2Check | select -Unique

if (!$Duplicatecheck) {$Duplicatecheck = $Column2Check } #$Null check as $Null creates issues

$ColumnValidity =  Compare-Object -ReferenceObject $Column2Check -DifferenceObject $Duplicatecheck -ErrorAction SilentlyContinue

if( $ColumnValidity -ne $null)
    {
    Return $False
    }else{
        Return $true}
}

    Function check-ValidPuzzle{

param (
    [Parameter(Mandatory=$true)]
    $InitialPuzzle 
    )

$ValidPuzzle =@()

 for ($num = 0 ; $num -le 8 ; $num++)
    {  
    $ValidPuzzle =$ValidPuzzle + (check-column -InitialPuzzle $InitialPuzzle -ColumnNumber $num)
    $ValidPuzzle =$ValidPuzzle + (check-row -Row2Check $InitialPuzzle[$num])
    $ValidPuzzle =$ValidPuzzle + (check-square -InitialPuzzle $InitialPuzzle -SquareNumber ($num+1))
    }

    $ValidPuzzle = ($ValidPuzzle -match $false).count

    if ($ValidPuzzle -ne 0)
    { 
    return $False
    }else {Return $true}
}
    
    # Set the size of your form
    $Form = New-Object System.Windows.Forms.Form
    $Form.Width = 600
    $Form.height = 600
    $Form.Text = ”Fronks Sudoku solver”
 
    # Set the font of the text to be used within the form
    $Font = New-Object System.Drawing.Font("Ariel",8)
    $Form.Font = $Font
    
    $InitialPuzzle= @((1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9))

    # The number of combo boxes required:
    $count = 81
    $i= 0
    $x=30
    $y=30

    1..$count | ForEach-Object {"ComboBox$PSitem"} | ForEach{
    $CurrentObj = $null
    $CurrentObj = New-Object System.Windows.Forms.ComboBox
    
    if ((($i/9) -is [int]) -and ($i -gt 0))
        {
            $y=$y + 50
            $x=$x - 540    
        }

    # Increment location values
    $CurrentObj.Location = new-object System.Drawing.Size($x,($y))
    $CurrentObj.Size = new-object System.Drawing.Size (55,40)
    @('blank',‘1’,’2’,’3',‘4’,’5’,’6’,‘7’,’8’,’9’) | ForEach-Object {[void] $CurrentObj.Items.Add($_)}
    $CurrentObj.SelectedIndex = 0

    Remove-Variable -Name "value$i" -ErrorAction Ignore
    New-Variable "value$i" $CurrentObj

    # Uncomment the following to add the button to $form
    $form.Controls.Add($CurrentObj)
    $x = $x + 60
    $i++
    }

    #Add a label
    $label = New-Object System.Windows.Forms.Label
    $label.Location = New-Object System.Drawing.Point(10,10)
    $label.Size = New-Object System.Drawing.Size(280,20)
    $label.Text = 'Please enter the puzzle bellow:'
  

    #OK Button
    $OKButton = New-Object System.Windows.Forms.Button
    $OKButton.Location = New-Object System.Drawing.Point(200,500)
    $OKButton.Size = New-Object System.Drawing.Size(75,23)
    $OKButton.Text = 'Solve!'
    $OKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
    $form.AcceptButton = $OKButton

    #Cancel Button
    $CancelButton = New-Object System.Windows.Forms.Button
    $CancelButton.Location = New-Object System.Drawing.Point(275,500)
    $CancelButton.Size = New-Object System.Drawing.Size(75,23)
    $CancelButton.Text = 'Cancel'
    $CancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    $form.CancelButton = $CancelButton

    #Draw Grid
    $Line1 = new-object Drawing.Pen Black
    $Line1.width = 2
    $formGraphics = $form.createGraphics()
    $form.add_paint({$formGraphics.DrawLine($Line1, 207, 30, 207, 455)}) 
    $form.add_paint({$formGraphics.DrawLine($Line1, 387, 30, 387, 455)})
    $form.add_paint({$formGraphics.DrawLine($Line1, 25, 165, 580, 165)})
    $form.add_paint({$formGraphics.DrawLine($Line1, 25, 315, 580, 315)})      

    #Display elements
    $form.Controls.Add($label)
    $form.Controls.Add($OKButton)
    $form.Controls.Add($CancelButton)   

 
    #capture results 
    $result = $form.ShowDialog()

    $Variablename = "$Button"

        if ($result -eq [System.Windows.Forms.DialogResult]::OK)
        {
            $z=0
            $x=0

            For ($i=0; $i -lt 81; $i++) 
                {
                if ((($i/9) -is [int]) -and ($i -gt 0))
                    {
                    $z=$z+1
                    $x=$x-9
                    }
                $CurrentValue = Get-Variable -name "value$i" -ValueOnly
                $InitialPuzzle[$z][$x] =$CurrentValue.SelectedItem   
                $x = $x + 1
                     
                }
        check-ValidPuzzle -InitialPuzzle $InitialPuzzle
             
        }           